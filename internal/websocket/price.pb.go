// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.14.0
// source: price.proto

package websocket

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LTPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ltp   uint32 `protobuf:"varint,1,opt,name=ltp,proto3" json:"ltp,omitempty"` // last trade price
	Close uint32 `protobuf:"varint,2,opt,name=close,proto3" json:"close,omitempty"`
}

func (x *LTPC) Reset() {
	*x = LTPC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LTPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LTPC) ProtoMessage() {}

func (x *LTPC) ProtoReflect() protoreflect.Message {
	mi := &file_price_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LTPC.ProtoReflect.Descriptor instead.
func (*LTPC) Descriptor() ([]byte, []int) {
	return file_price_proto_rawDescGZIP(), []int{0}
}

func (x *LTPC) GetLtp() uint32 {
	if x != nil {
		return x.Ltp
	}
	return 0
}

func (x *LTPC) GetClose() uint32 {
	if x != nil {
		return x.Close
	}
	return 0
}

type Full struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volume            uint32 `protobuf:"varint,1,opt,name=volume,proto3" json:"volume,omitempty"`
	Open              uint32 `protobuf:"varint,2,opt,name=open,proto3" json:"open,omitempty"`
	High              uint32 `protobuf:"varint,3,opt,name=high,proto3" json:"high,omitempty"`
	Close             uint32 `protobuf:"varint,4,opt,name=close,proto3" json:"close,omitempty"`
	Low               uint32 `protobuf:"varint,5,opt,name=low,proto3" json:"low,omitempty"`
	AverageTradePrice uint32 `protobuf:"varint,6,opt,name=average_trade_price,json=averageTradePrice,proto3" json:"average_trade_price,omitempty"`
	ExchangeTimestamp uint32 `protobuf:"varint,7,opt,name=exchange_timestamp,json=exchangeTimestamp,proto3" json:"exchange_timestamp,omitempty"`
	OpenInterest      uint64 `protobuf:"varint,8,opt,name=open_interest,json=openInterest,proto3" json:"open_interest,omitempty"`
	OiChange          uint64 `protobuf:"varint,9,opt,name=oi_change,json=oiChange,proto3" json:"oi_change,omitempty"`
	TotalOi           uint64 `protobuf:"varint,10,opt,name=total_oi,json=totalOi,proto3" json:"total_oi,omitempty"`
	UpperCircuit      uint32 `protobuf:"varint,11,opt,name=upper_circuit,json=upperCircuit,proto3" json:"upper_circuit,omitempty"`
	LowerCircuit      uint32 `protobuf:"varint,12,opt,name=lower_circuit,json=lowerCircuit,proto3" json:"lower_circuit,omitempty"`
	LastTradeTime     uint32 `protobuf:"varint,13,opt,name=last_trade_time,json=lastTradeTime,proto3" json:"last_trade_time,omitempty"`             // last trade time
	LastTradeQuantity uint32 `protobuf:"varint,14,opt,name=last_trade_quantity,json=lastTradeQuantity,proto3" json:"last_trade_quantity,omitempty"` // last trade quantity
}

func (x *Full) Reset() {
	*x = Full{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Full) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Full) ProtoMessage() {}

func (x *Full) ProtoReflect() protoreflect.Message {
	mi := &file_price_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Full.ProtoReflect.Descriptor instead.
func (*Full) Descriptor() ([]byte, []int) {
	return file_price_proto_rawDescGZIP(), []int{1}
}

func (x *Full) GetVolume() uint32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Full) GetOpen() uint32 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *Full) GetHigh() uint32 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *Full) GetClose() uint32 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *Full) GetLow() uint32 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *Full) GetAverageTradePrice() uint32 {
	if x != nil {
		return x.AverageTradePrice
	}
	return 0
}

func (x *Full) GetExchangeTimestamp() uint32 {
	if x != nil {
		return x.ExchangeTimestamp
	}
	return 0
}

func (x *Full) GetOpenInterest() uint64 {
	if x != nil {
		return x.OpenInterest
	}
	return 0
}

func (x *Full) GetOiChange() uint64 {
	if x != nil {
		return x.OiChange
	}
	return 0
}

func (x *Full) GetTotalOi() uint64 {
	if x != nil {
		return x.TotalOi
	}
	return 0
}

func (x *Full) GetUpperCircuit() uint32 {
	if x != nil {
		return x.UpperCircuit
	}
	return 0
}

func (x *Full) GetLowerCircuit() uint32 {
	if x != nil {
		return x.LowerCircuit
	}
	return 0
}

func (x *Full) GetLastTradeTime() uint32 {
	if x != nil {
		return x.LastTradeTime
	}
	return 0
}

func (x *Full) GetLastTradeQuantity() uint32 {
	if x != nil {
		return x.LastTradeQuantity
	}
	return 0
}

type MarketDepth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buys  []*MarketDepth_Buy  `protobuf:"bytes,1,rep,name=buys,proto3" json:"buys,omitempty"`
	Sells []*MarketDepth_Sell `protobuf:"bytes,2,rep,name=sells,proto3" json:"sells,omitempty"`
}

func (x *MarketDepth) Reset() {
	*x = MarketDepth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDepth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDepth) ProtoMessage() {}

func (x *MarketDepth) ProtoReflect() protoreflect.Message {
	mi := &file_price_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDepth.ProtoReflect.Descriptor instead.
func (*MarketDepth) Descriptor() ([]byte, []int) {
	return file_price_proto_rawDescGZIP(), []int{2}
}

func (x *MarketDepth) GetBuys() []*MarketDepth_Buy {
	if x != nil {
		return x.Buys
	}
	return nil
}

func (x *MarketDepth) GetSells() []*MarketDepth_Sell {
	if x != nil {
		return x.Sells
	}
	return nil
}

type Extended struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketDepth       *MarketDepth `protobuf:"bytes,1,opt,name=market_depth,json=marketDepth,proto3" json:"market_depth,omitempty"`
	TotalBuyQuantity  uint32       `protobuf:"varint,2,opt,name=total_buy_quantity,json=totalBuyQuantity,proto3" json:"total_buy_quantity,omitempty"`    // total_buy_quantity
	TotalSellQuantity uint32       `protobuf:"varint,3,opt,name=total_sell_quantity,json=totalSellQuantity,proto3" json:"total_sell_quantity,omitempty"` // total_sell_quantity
}

func (x *Extended) Reset() {
	*x = Extended{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extended) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extended) ProtoMessage() {}

func (x *Extended) ProtoReflect() protoreflect.Message {
	mi := &file_price_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extended.ProtoReflect.Descriptor instead.
func (*Extended) Descriptor() ([]byte, []int) {
	return file_price_proto_rawDescGZIP(), []int{3}
}

func (x *Extended) GetMarketDepth() *MarketDepth {
	if x != nil {
		return x.MarketDepth
	}
	return nil
}

func (x *Extended) GetTotalBuyQuantity() uint32 {
	if x != nil {
		return x.TotalBuyQuantity
	}
	return 0
}

func (x *Extended) GetTotalSellQuantity() uint32 {
	if x != nil {
		return x.TotalSellQuantity
	}
	return 0
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_price_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_price_proto_rawDescGZIP(), []int{4}
}

func (x *Error) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Feed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange uint32    `protobuf:"varint,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Token    uint32    `protobuf:"varint,2,opt,name=token,proto3" json:"token,omitempty"`
	Ltpc     *LTPC     `protobuf:"bytes,3,opt,name=ltpc,proto3" json:"ltpc,omitempty"`
	Full     *Full     `protobuf:"bytes,4,opt,name=full,proto3" json:"full,omitempty"`
	Extended *Extended `protobuf:"bytes,5,opt,name=extended,proto3" json:"extended,omitempty"`
	Live     bool      `protobuf:"varint,6,opt,name=live,proto3" json:"live,omitempty"`
}

func (x *Feed) Reset() {
	*x = Feed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Feed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Feed) ProtoMessage() {}

func (x *Feed) ProtoReflect() protoreflect.Message {
	mi := &file_price_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Feed.ProtoReflect.Descriptor instead.
func (*Feed) Descriptor() ([]byte, []int) {
	return file_price_proto_rawDescGZIP(), []int{5}
}

func (x *Feed) GetExchange() uint32 {
	if x != nil {
		return x.Exchange
	}
	return 0
}

func (x *Feed) GetToken() uint32 {
	if x != nil {
		return x.Token
	}
	return 0
}

func (x *Feed) GetLtpc() *LTPC {
	if x != nil {
		return x.Ltpc
	}
	return nil
}

func (x *Feed) GetFull() *Full {
	if x != nil {
		return x.Full
	}
	return nil
}

func (x *Feed) GetExtended() *Extended {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *Feed) GetLive() bool {
	if x != nil {
		return x.Live
	}
	return false
}

type OrderUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId           string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Crn               string `protobuf:"bytes,2,opt,name=crn,proto3" json:"crn,omitempty"`
	Status            int64  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Quantity          int64  `protobuf:"varint,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	ReportType        int64  `protobuf:"varint,5,opt,name=report_type,json=reportType,proto3" json:"report_type,omitempty"`
	OmsId             string `protobuf:"bytes,6,opt,name=oms_id,json=omsId,proto3" json:"oms_id,omitempty"`
	ExchangeName      int64  `protobuf:"varint,7,opt,name=exchange_name,json=exchangeName,proto3" json:"exchange_name,omitempty"`
	TradingSymbol     string `protobuf:"bytes,8,opt,name=trading_symbol,json=tradingSymbol,proto3" json:"trading_symbol,omitempty"`
	TransactionType   int64  `protobuf:"varint,9,opt,name=transaction_type,json=transactionType,proto3" json:"transaction_type,omitempty"`
	FillId            string `protobuf:"bytes,10,opt,name=fill_id,json=fillId,proto3" json:"fill_id,omitempty"`
	FillQuantity      string `protobuf:"bytes,11,opt,name=fill_quantity,json=fillQuantity,proto3" json:"fill_quantity,omitempty"`
	FillTime          string `protobuf:"bytes,12,opt,name=fill_time,json=fillTime,proto3" json:"fill_time,omitempty"`
	FillPrice         string `protobuf:"bytes,13,opt,name=fill_price,json=fillPrice,proto3" json:"fill_price,omitempty"`
	FilledShares      int64  `protobuf:"varint,14,opt,name=filled_shares,json=filledShares,proto3" json:"filled_shares,omitempty"`
	RejectReason      string `protobuf:"bytes,15,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
	RejectedBy        string `protobuf:"bytes,16,opt,name=rejected_by,json=rejectedBy,proto3" json:"rejected_by,omitempty"`
	PriceType         int64  `protobuf:"varint,17,opt,name=price_type,json=priceType,proto3" json:"price_type,omitempty"`
	AveragePrice      string `protobuf:"bytes,18,opt,name=average_price,json=averagePrice,proto3" json:"average_price,omitempty"`
	CancelledQuantity int64  `protobuf:"varint,19,opt,name=cancelled_quantity,json=cancelledQuantity,proto3" json:"cancelled_quantity,omitempty"`
	ExchangeOrderId   string `protobuf:"bytes,20,opt,name=exchange_order_id,json=exchangeOrderId,proto3" json:"exchange_order_id,omitempty"`
}

func (x *OrderUpdate) Reset() {
	*x = OrderUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderUpdate) ProtoMessage() {}

func (x *OrderUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_price_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderUpdate.ProtoReflect.Descriptor instead.
func (*OrderUpdate) Descriptor() ([]byte, []int) {
	return file_price_proto_rawDescGZIP(), []int{6}
}

func (x *OrderUpdate) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OrderUpdate) GetCrn() string {
	if x != nil {
		return x.Crn
	}
	return ""
}

func (x *OrderUpdate) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OrderUpdate) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *OrderUpdate) GetReportType() int64 {
	if x != nil {
		return x.ReportType
	}
	return 0
}

func (x *OrderUpdate) GetOmsId() string {
	if x != nil {
		return x.OmsId
	}
	return ""
}

func (x *OrderUpdate) GetExchangeName() int64 {
	if x != nil {
		return x.ExchangeName
	}
	return 0
}

func (x *OrderUpdate) GetTradingSymbol() string {
	if x != nil {
		return x.TradingSymbol
	}
	return ""
}

func (x *OrderUpdate) GetTransactionType() int64 {
	if x != nil {
		return x.TransactionType
	}
	return 0
}

func (x *OrderUpdate) GetFillId() string {
	if x != nil {
		return x.FillId
	}
	return ""
}

func (x *OrderUpdate) GetFillQuantity() string {
	if x != nil {
		return x.FillQuantity
	}
	return ""
}

func (x *OrderUpdate) GetFillTime() string {
	if x != nil {
		return x.FillTime
	}
	return ""
}

func (x *OrderUpdate) GetFillPrice() string {
	if x != nil {
		return x.FillPrice
	}
	return ""
}

func (x *OrderUpdate) GetFilledShares() int64 {
	if x != nil {
		return x.FilledShares
	}
	return 0
}

func (x *OrderUpdate) GetRejectReason() string {
	if x != nil {
		return x.RejectReason
	}
	return ""
}

func (x *OrderUpdate) GetRejectedBy() string {
	if x != nil {
		return x.RejectedBy
	}
	return ""
}

func (x *OrderUpdate) GetPriceType() int64 {
	if x != nil {
		return x.PriceType
	}
	return 0
}

func (x *OrderUpdate) GetAveragePrice() string {
	if x != nil {
		return x.AveragePrice
	}
	return ""
}

func (x *OrderUpdate) GetCancelledQuantity() int64 {
	if x != nil {
		return x.CancelledQuantity
	}
	return 0
}

func (x *OrderUpdate) GetExchangeOrderId() string {
	if x != nil {
		return x.ExchangeOrderId
	}
	return ""
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//
	//	*Message_Feed
	//	*Message_OrderUpdate
	//	*Message_Error
	Data isMessage_Data `protobuf_oneof:"data"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_price_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_price_proto_rawDescGZIP(), []int{7}
}

func (m *Message) GetData() isMessage_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *Message) GetFeed() *Feed {
	if x, ok := x.GetData().(*Message_Feed); ok {
		return x.Feed
	}
	return nil
}

func (x *Message) GetOrderUpdate() *OrderUpdate {
	if x, ok := x.GetData().(*Message_OrderUpdate); ok {
		return x.OrderUpdate
	}
	return nil
}

func (x *Message) GetError() *Error {
	if x, ok := x.GetData().(*Message_Error); ok {
		return x.Error
	}
	return nil
}

type isMessage_Data interface {
	isMessage_Data()
}

type Message_Feed struct {
	Feed *Feed `protobuf:"bytes,1,opt,name=feed,proto3,oneof"`
}

type Message_OrderUpdate struct {
	OrderUpdate *OrderUpdate `protobuf:"bytes,2,opt,name=order_update,json=orderUpdate,proto3,oneof"`
}

type Message_Error struct {
	Error *Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*Message_Feed) isMessage_Data() {}

func (*Message_OrderUpdate) isMessage_Data() {}

func (*Message_Error) isMessage_Data() {}

type MarketDepth_Buy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BidQuantity   uint32 `protobuf:"varint,1,opt,name=bid_quantity,json=bidQuantity,proto3" json:"bid_quantity,omitempty"`           // bid quantity
	BidPrice      uint32 `protobuf:"varint,2,opt,name=bid_price,json=bidPrice,proto3" json:"bid_price,omitempty"`                    // bid price
	NoOfBidOrders uint32 `protobuf:"varint,3,opt,name=no_of_bid_orders,json=noOfBidOrders,proto3" json:"no_of_bid_orders,omitempty"` // bid number of orders
}

func (x *MarketDepth_Buy) Reset() {
	*x = MarketDepth_Buy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDepth_Buy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDepth_Buy) ProtoMessage() {}

func (x *MarketDepth_Buy) ProtoReflect() protoreflect.Message {
	mi := &file_price_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDepth_Buy.ProtoReflect.Descriptor instead.
func (*MarketDepth_Buy) Descriptor() ([]byte, []int) {
	return file_price_proto_rawDescGZIP(), []int{2, 0}
}

func (x *MarketDepth_Buy) GetBidQuantity() uint32 {
	if x != nil {
		return x.BidQuantity
	}
	return 0
}

func (x *MarketDepth_Buy) GetBidPrice() uint32 {
	if x != nil {
		return x.BidPrice
	}
	return 0
}

func (x *MarketDepth_Buy) GetNoOfBidOrders() uint32 {
	if x != nil {
		return x.NoOfBidOrders
	}
	return 0
}

type MarketDepth_Sell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AskQuantity   uint32 `protobuf:"varint,1,opt,name=ask_quantity,json=askQuantity,proto3" json:"ask_quantity,omitempty"`           // ask quantity
	AskPrice      uint32 `protobuf:"varint,2,opt,name=ask_price,json=askPrice,proto3" json:"ask_price,omitempty"`                    // ask price
	NoOfAskOrders uint32 `protobuf:"varint,3,opt,name=no_of_ask_orders,json=noOfAskOrders,proto3" json:"no_of_ask_orders,omitempty"` // ask number of orders
}

func (x *MarketDepth_Sell) Reset() {
	*x = MarketDepth_Sell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_price_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDepth_Sell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDepth_Sell) ProtoMessage() {}

func (x *MarketDepth_Sell) ProtoReflect() protoreflect.Message {
	mi := &file_price_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDepth_Sell.ProtoReflect.Descriptor instead.
func (*MarketDepth_Sell) Descriptor() ([]byte, []int) {
	return file_price_proto_rawDescGZIP(), []int{2, 1}
}

func (x *MarketDepth_Sell) GetAskQuantity() uint32 {
	if x != nil {
		return x.AskQuantity
	}
	return 0
}

func (x *MarketDepth_Sell) GetAskPrice() uint32 {
	if x != nil {
		return x.AskPrice
	}
	return 0
}

func (x *MarketDepth_Sell) GetNoOfAskOrders() uint32 {
	if x != nil {
		return x.NoOfAskOrders
	}
	return 0
}

var File_price_proto protoreflect.FileDescriptor

var file_price_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x22, 0x2e, 0x0a, 0x04, 0x4c, 0x54, 0x50, 0x43, 0x12, 0x10, 0x0a, 0x03,
	0x6c, 0x74, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x74, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x22, 0xcc, 0x03, 0x0a, 0x04, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6f, 0x70, 0x65,
	0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x69, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x69,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x6f, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f,
	0x69, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75,
	0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x70, 0x70, 0x65, 0x72, 0x43,
	0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x22, 0xc9, 0x02, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65,
	0x70, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x04, 0x62, 0x75, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x44, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x42, 0x75, 0x79, 0x52, 0x04, 0x62, 0x75, 0x79, 0x73, 0x12,
	0x2d, 0x0a, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70,
	0x74, 0x68, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x52, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x73, 0x1a, 0x6e,
	0x0a, 0x03, 0x42, 0x75, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x69, 0x64,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x64, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x69, 0x64,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x62,
	0x69, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x6e, 0x6f, 0x4f, 0x66, 0x42, 0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x6f,
	0x0a, 0x04, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x73,
	0x6b, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x6b,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x73,
	0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f,
	0x61, 0x73, 0x6b, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x6e, 0x6f, 0x4f, 0x66, 0x41, 0x73, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22,
	0x9f, 0x01, 0x0a, 0x08, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x0c,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65,
	0x70, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x75, 0x79,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x75, 0x79, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x6c, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x22, 0x35, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x04, 0x46, 0x65, 0x65,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x04, 0x6c, 0x74, 0x70, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c, 0x54, 0x50, 0x43, 0x52, 0x04,
	0x6c, 0x74, 0x70, 0x63, 0x12, 0x1f, 0x0a, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x52,
	0x04, 0x66, 0x75, 0x6c, 0x6c, 0x12, 0x2b, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x6c, 0x69, 0x76, 0x65, 0x22, 0xa1, 0x05, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x63, 0x72, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x6d, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x6d, 0x73, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x6c, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2a,
	0x0a, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x04, 0x66, 0x65, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48,
	0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x2f, 0x62, 0x72, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2d, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_price_proto_rawDescOnce sync.Once
	file_price_proto_rawDescData = file_price_proto_rawDesc
)

func file_price_proto_rawDescGZIP() []byte {
	file_price_proto_rawDescOnce.Do(func() {
		file_price_proto_rawDescData = protoimpl.X.CompressGZIP(file_price_proto_rawDescData)
	})
	return file_price_proto_rawDescData
}

var file_price_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_price_proto_goTypes = []interface{}{
	(*LTPC)(nil),             // 0: types.LTPC
	(*Full)(nil),             // 1: types.Full
	(*MarketDepth)(nil),      // 2: types.MarketDepth
	(*Extended)(nil),         // 3: types.Extended
	(*Error)(nil),            // 4: types.Error
	(*Feed)(nil),             // 5: types.Feed
	(*OrderUpdate)(nil),      // 6: types.OrderUpdate
	(*Message)(nil),          // 7: types.Message
	(*MarketDepth_Buy)(nil),  // 8: types.MarketDepth.Buy
	(*MarketDepth_Sell)(nil), // 9: types.MarketDepth.Sell
}
var file_price_proto_depIdxs = []int32{
	8, // 0: types.MarketDepth.buys:type_name -> types.MarketDepth.Buy
	9, // 1: types.MarketDepth.sells:type_name -> types.MarketDepth.Sell
	2, // 2: types.Extended.market_depth:type_name -> types.MarketDepth
	0, // 3: types.Feed.ltpc:type_name -> types.LTPC
	1, // 4: types.Feed.full:type_name -> types.Full
	3, // 5: types.Feed.extended:type_name -> types.Extended
	5, // 6: types.Message.feed:type_name -> types.Feed
	6, // 7: types.Message.order_update:type_name -> types.OrderUpdate
	4, // 8: types.Message.error:type_name -> types.Error
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_price_proto_init() }
func file_price_proto_init() {
	if File_price_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_price_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LTPC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Full); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDepth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extended); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Feed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDepth_Buy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_price_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDepth_Sell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_price_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*Message_Feed)(nil),
		(*Message_OrderUpdate)(nil),
		(*Message_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_price_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_price_proto_goTypes,
		DependencyIndexes: file_price_proto_depIdxs,
		MessageInfos:      file_price_proto_msgTypes,
	}.Build()
	File_price_proto = out.File
	file_price_proto_rawDesc = nil
	file_price_proto_goTypes = nil
	file_price_proto_depIdxs = nil
}
